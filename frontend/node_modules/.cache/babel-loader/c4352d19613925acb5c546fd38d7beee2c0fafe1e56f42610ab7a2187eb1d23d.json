{"ast":null,"code":"// src/routes/productRoutes.js\n\nconst express = require('express');\nconst Product = require('../models/Product');\nconst jwt = require('jsonwebtoken');\nconst router = express.Router();\n\n// Middleware para verificar el token y rol\nconst verifyAdmin = (req, res, next) => {\n  var _req$headers$authoriz;\n  const token = (_req$headers$authoriz = req.headers['authorization']) === null || _req$headers$authoriz === void 0 ? void 0 : _req$headers$authoriz.split(' ')[1]; // Obtenemos el token desde el header\n  if (!token) return res.status(401).json({\n    message: 'Acceso denegado. No se encontró el token.'\n  });\n  try {\n    const decodedToken = jwt.verify(token, process.env.JWT_SECRET); // Verificamos el token\n    if (decodedToken.role !== 'admin') {\n      // Verificamos que el rol sea admin\n      return res.status(403).json({\n        message: 'No tienes permisos para realizar esta acción.'\n      });\n    }\n    req.user = decodedToken; // Puedes almacenar la información decodificada para usarla después\n    next(); // Continuamos con la ruta\n  } catch (error) {\n    return res.status(401).json({\n      message: 'Token no válido.'\n    });\n  }\n};\n\n// Ruta para agregar un producto\nrouter.post('/', verifyAdmin, async (req, res) => {\n  const {\n    name,\n    description,\n    price,\n    category,\n    quantity\n  } = req.body;\n  try {\n    // Crear el nuevo producto directamente sin usar .map()\n    const newProduct = new Product({\n      name,\n      description,\n      price,\n      category,\n      quantity\n    });\n    await newProduct.save(); // Guardamos el nuevo producto en la base de datos\n\n    res.status(201).json({\n      message: 'Producto añadido exitosamente',\n      product: newProduct\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error al agregar el producto',\n      error\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","Product","jwt","router","Router","verifyAdmin","req","res","next","_req$headers$authoriz","token","headers","split","status","json","message","decodedToken","verify","process","env","JWT_SECRET","role","user","error","post","name","description","price","category","quantity","body","newProduct","save","product","module","exports"],"sources":["C:/Users/juanm/OneDrive/Escritorio/R/frontend/src/componentes/home.js"],"sourcesContent":["// src/routes/productRoutes.js\r\n\r\nconst express = require('express');\r\nconst Product = require('../models/Product');\r\nconst jwt = require('jsonwebtoken');\r\nconst router = express.Router();\r\n\r\n// Middleware para verificar el token y rol\r\nconst verifyAdmin = (req, res, next) => {\r\n  const token = req.headers['authorization']?.split(' ')[1];  // Obtenemos el token desde el header\r\n  if (!token) return res.status(401).json({ message: 'Acceso denegado. No se encontró el token.' });\r\n\r\n  try {\r\n    const decodedToken = jwt.verify(token, process.env.JWT_SECRET);  // Verificamos el token\r\n    if (decodedToken.role !== 'admin') {  // Verificamos que el rol sea admin\r\n      return res.status(403).json({ message: 'No tienes permisos para realizar esta acción.' });\r\n    }\r\n    req.user = decodedToken;  // Puedes almacenar la información decodificada para usarla después\r\n    next();  // Continuamos con la ruta\r\n  } catch (error) {\r\n    return res.status(401).json({ message: 'Token no válido.' });\r\n  }\r\n};\r\n\r\n// Ruta para agregar un producto\r\nrouter.post('/', verifyAdmin, async (req, res) => {\r\n  const { name, description, price, category, quantity } = req.body;\r\n\r\n  try {\r\n    // Crear el nuevo producto directamente sin usar .map()\r\n    const newProduct = new Product({\r\n      name,\r\n      description,\r\n      price,\r\n      category,\r\n      quantity,\r\n    });\r\n\r\n    await newProduct.save();  // Guardamos el nuevo producto en la base de datos\r\n\r\n    res.status(201).json({ message: 'Producto añadido exitosamente', product: newProduct });\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error al agregar el producto', error });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAC5C,MAAME,GAAG,GAAGF,OAAO,CAAC,cAAc,CAAC;AACnC,MAAMG,MAAM,GAAGJ,OAAO,CAACK,MAAM,CAAC,CAAC;;AAE/B;AACA,MAAMC,WAAW,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAAA,IAAAC,qBAAA;EACtC,MAAMC,KAAK,IAAAD,qBAAA,GAAGH,GAAG,CAACK,OAAO,CAAC,eAAe,CAAC,cAAAF,qBAAA,uBAA5BA,qBAAA,CAA8BG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;EAC5D,IAAI,CAACF,KAAK,EAAE,OAAOH,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;IAAEC,OAAO,EAAE;EAA4C,CAAC,CAAC;EAEjG,IAAI;IACF,MAAMC,YAAY,GAAGd,GAAG,CAACe,MAAM,CAACP,KAAK,EAAEQ,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC,CAAC,CAAE;IACjE,IAAIJ,YAAY,CAACK,IAAI,KAAK,OAAO,EAAE;MAAG;MACpC,OAAOd,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAgD,CAAC,CAAC;IAC3F;IACAT,GAAG,CAACgB,IAAI,GAAGN,YAAY,CAAC,CAAE;IAC1BR,IAAI,CAAC,CAAC,CAAC,CAAE;EACX,CAAC,CAAC,OAAOe,KAAK,EAAE;IACd,OAAOhB,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAmB,CAAC,CAAC;EAC9D;AACF,CAAC;;AAED;AACAZ,MAAM,CAACqB,IAAI,CAAC,GAAG,EAAEnB,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAChD,MAAM;IAAEkB,IAAI;IAAEC,WAAW;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGvB,GAAG,CAACwB,IAAI;EAEjE,IAAI;IACF;IACA,MAAMC,UAAU,GAAG,IAAI9B,OAAO,CAAC;MAC7BwB,IAAI;MACJC,WAAW;MACXC,KAAK;MACLC,QAAQ;MACRC;IACF,CAAC,CAAC;IAEF,MAAME,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,CAAE;;IAE1BzB,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,+BAA+B;MAAEkB,OAAO,EAAEF;IAAW,CAAC,CAAC;EACzF,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdhB,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,8BAA8B;MAAEQ;IAAM,CAAC,CAAC;EAC1E;AACF,CAAC,CAAC;AAEFW,MAAM,CAACC,OAAO,GAAGhC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}